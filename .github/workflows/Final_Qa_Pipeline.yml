name: Self_hosted_Qa_Pipeline

on:
  workflow_dispatch:
    inputs:
      pull_branch:
        description: 'Pull the latest branch of the application'
        required: true
        default: false
        type: boolean
      assets_install:
        description: 'Install application assets'
        required: true
        default: false
        type: boolean
      database_update:
        description: 'Run database migrations or updates'
        required: true
        default: false
        type: boolean
      clear_query_result:
        description: 'Clear the query result cache'
        required: true
        default: false
        type: boolean
      cache_clear:
        description: 'Clear the application cache'
        required: true
        default: false
        type: boolean
      custom_command:
        description: 'Custom command to execute inside mt_app container'
        required: false
        type: string

jobs:
  pull_branch_job:    
    runs-on: self-hosted
    if: ${{ github.event.inputs.pull_branch == 'true' }}
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Pull the latest branch
      run: |
        ssh -o StrictHostKeyChecking=no -T ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          # Pull the latest branch
          git -C /path/to/your/app pull origin main
        EOF

  assets_install_job:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.assets_install == 'true' }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Install assets inside mt_app container
      run: |
        ssh -o StrictHostKeyChecking=no -T ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          # Install assets inside the mt_app container
          sudo docker exec -w /app mt_app php bin/console fos:js-routing:dump --format=json --target=public/assets/js/fos_js_routes.json -e prod
          sudo docker exec -w /app mt_app yarn --cwd /app encore production
        EOF

  database_update_job:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.database_update == 'true' }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Update database inside mt_app container
      run: |
        ssh -o StrictHostKeyChecking=no -T ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          # Run database updates
          sudo docker exec -w /app mt_app php bin/console doctrine:cache:clear-metadata
          sudo docker exec -w /app mt_app php bin/console doctrine:schema:update --force
        EOF

  clear_query_result_job:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.clear_query_result == 'true' }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Clear query result cache inside mt_app container
      run: |
        ssh -o StrictHostKeyChecking=no -T ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          # Clear query result cache
          sudo docker exec -w /app mt_app php bin/console doctrine:cache:clear-query
          sudo docker exec -w /app mt_app php bin/console doctrine:cache:clear-result
        EOF

  cache_clear_job:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.cache_clear == 'true' }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Clear application cache inside mt_app container
      run: |
        ssh -o StrictHostKeyChecking=no -T ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          # Clear the application cache
          sudo docker exec -w /app mt_app php bin/console ca:cl -e prod
          sudo docker exec -w /app mt_app bash docker-entrypoint.sh
        EOF

  custom_command_job:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.custom_command != '' }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Execute custom command inside mt_app container
      run: |
        ssh -o StrictHostKeyChecking=no -T ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          # Execute custom command inside mt_app container
          sudo docker exec -w /app mt_app php bin/console "${{ github.event.inputs.custom_command }}"
        EOF
